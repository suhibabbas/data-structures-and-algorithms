/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package tree.intersection;

import tree.intersection.data.Node;
import tree.intersection.structure.HashMap;
import tree.intersection.structure.TreeIntersection;

import java.util.HashSet;
import java.util.Set;
import java.util.Stack;

public class App {

    public static void main(String[] args) {

        TreeIntersection<Integer> treeIntersection1 = new TreeIntersection<>();
        treeIntersection1.add(15);
        treeIntersection1.add(20);
        treeIntersection1.add(3);
        treeIntersection1.add(4);
        treeIntersection1.add(5);
        treeIntersection1.add(40);

        TreeIntersection<Integer> treeIntersection2 = new TreeIntersection<>();
        treeIntersection2.add(15);
        treeIntersection2.add(20);
        treeIntersection2.add(7);
        treeIntersection2.add(9);
        treeIntersection2.add(40);

        HashMap<Integer, Integer> hashMap = new HashMap<>();


        System.out.println(treeIntersection1.getInOrder());
        hashMap = treeIntersection(treeIntersection1,treeIntersection2);
        System.out.println(hashMap.keys());

//        System.out.println(treeIntersection(treeIntersection1 , treeIntersection2));


    }

    public static HashMap<Integer,Integer> treeIntersection(TreeIntersection<Integer> treeIntersection1, TreeIntersection<Integer> treeIntersection2){
        HashMap<Integer,Integer> hashMap = new HashMap<>();

        for (int node1:treeIntersection1.getInOrder()
             ) {
            for (int node2: treeIntersection2.getInOrder()
                 ) {
                if(node1 == node2 ){
                    hashMap.set(node1,node2);
                }
            }
        }

        return hashMap;

    }

}
